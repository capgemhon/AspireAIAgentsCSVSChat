@page "/"  
@using System.ComponentModel  
@inject IChatClient ChatClient  
@inject NavigationManager Nav  
@inject SemanticSearch Search  
@inject AspireAIAgentsCSVSChat.Web.Services.MultiAgents.MultiAgentApiClient MultiAgentApiClient
@implements IDisposable  
@using Microsoft.AspNetCore.Hosting
@using AspireAIAgentsCSVSChat.Web.Services.Ingestion
@inject IServiceProvider ServiceProvider

<PageTitle>Chat</PageTitle>  

<ChatHeader OnNewChat="@ResetConversationAsync" />  

<ChatMessageList Messages="@messages" InProgressMessage="@currentResponseMessage">  
    <NoMessagesContent>  
        <div>To get started, try asking about these example documents. You can replace these with your own data and replace this message.</div>
        <ChatCitation File="GMP_Compliance_Report_Guidelines_V_7.pdf"/>
    </NoMessagesContent>  
</ChatMessageList>  

<div class="chat-container">  
    <ChatSuggestions OnSelected="@AddUserMessageAsync" @ref="@chatSuggestions" />  
    <ChatInput OnSend="@AddUserMessageAsync" @ref="@chatInput" />  
    @* <SurveyPrompt /> *@ @* Remove this line to eliminate the template survey message *@ 

    <div class="btn-default upload-button" style="width:250px; margin:10px; margin-left:95px;">  
        <InputFile OnChange="UploadFileSelected" />  
    </div>  
</div>  

@code {
    private IHostingEnvironment _environment;

    private async Task UploadFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File as IBrowserFile;
        if (file is not null)  
        {  
            var uploadPath = Path.Combine("wwwroot", "Uploads", file.Name);  
            Directory.CreateDirectory(Path.GetDirectoryName(uploadPath)!);  

            await using var stream = file.OpenReadStream();  
            await using var fileStream = File.Create(uploadPath);  
            await stream.CopyToAsync(fileStream);  

            await fileStream.DisposeAsync();  
            await stream.DisposeAsync();  

            _environment = ServiceProvider.GetRequiredService<IHostingEnvironment>();  
            await DataIngestor.IngestDataAsync(  
                ServiceProvider,  
                new PDFDirectorySource(Path.Combine(_environment.WebRootPath, "Uploads"))  
            );  
        }
    }
}

@code {  
   private const string SystemPrompt = @"  
       You are an CSV assistant who answers questions about information you retrieve.
       Use only simple markdown to format your responses.
       You are able to fully check or analyze whole external documents and process them if you can to see if this document is compliant or not.
       You can analyse any provided snippets or key sections of the report
       Do not answer questions about anything else.  

       You can use the search tool to find relevant information. When you do this, end your  
       reply with any citations as the source in the special XML format:  

       <citation filename='string' page_number='number'>exact quote here</citation>  

       Always include the citation in your response if there are results.   
       ";  

   private readonly ChatOptions chatOptions = new();  
   private readonly List<ChatMessage> messages = new();  
   private CancellationTokenSource? currentResponseCancellation;  
   private ChatMessage? currentResponseMessage;  
   private ChatInput? chatInput;  
   private ChatSuggestions? chatSuggestions;  

   protected override void OnInitialized()  
   {  
       messages.Add(new(ChatRole.System, SystemPrompt));  
       chatOptions.Tools = [AIFunctionFactory.Create(SearchAsync), 
                            AIFunctionFactory.Create(AnotherPluginAsync)];
   }  

   private async Task AddUserMessageAsync(ChatMessage userMessage)  
   {  
       CancelAnyCurrentResponse();  

       // Add the user message to the conversation  
       messages.Add(userMessage);  
       chatSuggestions?.Clear();  
       await chatInput!.FocusAsync();  

       // Stream and display a new response from the IChatClient  
       var responseText = new TextContent("");  
       currentResponseMessage = new ChatMessage(ChatRole.Assistant, [responseText]);  
       currentResponseCancellation = new();  

       await foreach (var update in ChatClient.GetStreamingResponseAsync([.. messages], chatOptions, currentResponseCancellation.Token))
       {
            messages.AddMessages(update, filter: c => c is not TextContent);
            responseText.Text += update.Text;
            ChatMessageItem.NotifyChanged(currentResponseMessage);
       }

       // Call the GetMultiAgentResponseAsync method
       string aiMultiAgentResponses = await MultiAgentApiClient.GetMultiAgentResponseAsync(responseText.Text);
       messages.Add(new ChatMessage(ChatRole.Assistant, new TextContent(aiMultiAgentResponses).Text));
       ChatMessageItem.NotifyChanged(currentResponseMessage);

       // Store the final response in the conversation, and begin getting suggestions  
       messages.Add(currentResponseMessage!);  
       currentResponseMessage = null;  
       chatSuggestions?.Update(messages);  
   }  

   private void CancelAnyCurrentResponse()  
   {  
       // If a response was cancelled while streaming, include it in the conversation so it's not lost  
       if (currentResponseMessage is not null)  
       {  
           messages.Add(currentResponseMessage);  
       }  

       currentResponseCancellation?.Cancel();  
       currentResponseMessage = null;  
   }  

   private async Task ResetConversationAsync()  
   {  
       CancelAnyCurrentResponse();  
       messages.Clear();  
       messages.Add(new(ChatRole.System, SystemPrompt));  
       chatSuggestions?.Clear();  
       await chatInput!.FocusAsync();  
   }  

   [Description("Searches for information using a phrase or keyword")]  
   private async Task<IEnumerable<string>> SearchAsync(  
       [Description("The phrase to search for.")] string searchPhrase,  
       [Description("If possible, specify the filename to search that file only. If not provided or empty, the search includes all files.")] string? filenameFilter = null)  
   {  
       await InvokeAsync(StateHasChanged);  
       var results = await Search.SearchAsync(searchPhrase, filenameFilter, maxResults: 5);  
       return results.Select(result =>  
           $"<result filename=\"{result.FileName}\" page_number=\"{result.PageNumber}\">{result.Text}</result>");  
   }  

    [Description("Another plugin functionality")]
    private async Task<IEnumerable<string>> AnotherPluginAsync(
        [Description("The input for the plugin.")] string input,
        [Description("Optional parameter for additional context.")] string? context = null)
    {
        await InvokeAsync(StateHasChanged);
        // Simulate plugin logic
        var results = new List<string>
                {
                    $"<result plugin=\"AnotherPlugin\" detail=\"Processed input: {input}\">{context}</result>"
                };
        return results;
    }


   public void Dispose()  
       => currentResponseCancellation?.Cancel();  
}
