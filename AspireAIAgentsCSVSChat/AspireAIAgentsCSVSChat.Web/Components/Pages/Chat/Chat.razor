@page "/"  
@using System.ComponentModel  
@inject IChatClient ChatClient  
@inject NavigationManager Nav  
@inject SemanticSearch Search  
@inject AspireAIAgentsCSVSChat.Web.Services.MultiAgents.MultiAgentApiClient MultiAgentApiClient
@implements IDisposable  
@using Microsoft.AspNetCore.Hosting
@using AspireAIAgentsCSVSChat.Web.Services.Ingestion
@using Microsoft.SemanticKernel
@using Microsoft.KernelMemory
@using Microsoft.KernelMemory.AI
@using Microsoft.KernelMemory.MemoryStorage.DevTools
@using System.Diagnostics
@using UglyToad.PdfPig
@inject IServiceProvider ServiceProvider
@inject Kernel SemanticKernel

<PageTitle>CSV Chat</PageTitle>  

<ChatHeader OnNewChat="@ResetConversationAsync" />  

<ChatMessageList Messages="@messages" InProgressMessage="@currentResponseMessage">  
    <NoMessagesContent>  
        <div>To get started, try uploading a mock ERD Medical Device Design Plan Document. You can type (at-sign)process document name to trigger the multiagent otherwise you can do general search on any uploaded documents listed below.</div>
        <ChatCitation File="GMP_Compliance_Report_Guidelines_V_7.pdf"/>
        <ChatCitation File="Medical Device Design Plan.pdf" />
    </NoMessagesContent>  
</ChatMessageList>
<div class="btn-default upload-button" style="width:250px; margin:10px; margin-left:80px;">
    <InputFile OnChange="UploadFileSelected" />
</div>
<div class="chat-container" style="background-color: #ccffcc;">
    <ChatSuggestions OnSelected="@AddUserMessageAsync" @ref="@chatSuggestions" />  
    <ChatInput OnSend="@AddUserMessageAsync" @ref="@chatInput" />  
    @* <SurveyPrompt /> *@ @* Remove this line to eliminate the template survey message *@ 
</div>  

@code {
    private IHostingEnvironment _environment;

    private async Task UploadFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File as IBrowserFile;
        if (file is not null)  
        {  
            var uploadPath = Path.Combine("wwwroot", "Uploads", file.Name);  
            Directory.CreateDirectory(Path.GetDirectoryName(uploadPath)!);  

            await using var stream = file.OpenReadStream();  
            await using var fileStream = File.Create(uploadPath);  
            await stream.CopyToAsync(fileStream);  

            await fileStream.DisposeAsync();  
            await stream.DisposeAsync();  

            _environment = ServiceProvider.GetRequiredService<IHostingEnvironment>();  
            await DataIngestor.IngestDataAsync(  
                ServiceProvider,  
                new PDFDirectorySource(Path.Combine(_environment.WebRootPath, "Uploads"))  
            );  
        }
        // Force page refresh
        OnInitialized();
    }
}

@code {
    private const string SystemPrompt = @"  
       You are an CSV assistant who answers questions about information you retrieve.
       Use only simple markdown to format your responses.
       If user types in @process, you will run SearchMultiAgentAsync, and if user types in @memory, you will run SearchMemoryAsync otherwise run SearchAsync.
       You are able to fully check or analyze whole external documents and process them if you can to see if this document is compliant or not.
       You can analyse any provided snippets or key sections of the report
       Do not answer questions generally about anything else.  

       You can use the search tool to find relevant information. When you do this, end your  
       reply with any citations as the source in the special XML format:  

       <citation filename='string' page_number='number'>exact quote here</citation>  

       Always include the citation in your response if there are results.   
       ";  

    OpenAIConfig openAIConfig = new OpenAIConfig();
    AzureOpenAIConfig azureOpenAITextConfig = new AzureOpenAIConfig();
    AzureOpenAIConfig azureOpenAIEmbeddingConfig = new AzureOpenAIConfig();


    private readonly ChatOptions chatOptions = new();  
    private readonly List<ChatMessage> messages = new();  
    private CancellationTokenSource? currentResponseCancellation;  
    private ChatMessage? currentResponseMessage;  
    private ChatInput? chatInput;  
    private ChatSuggestions? chatSuggestions;
    private ChatMessage? _userMessage;

    protected override void OnInitialized()  
    {  
        messages.Add(new(ChatRole.System, SystemPrompt));  
        chatOptions.Tools = [AIFunctionFactory.Create(SearchAsync),
                AIFunctionFactory.Create(SearchMultiAgentAsync),
                AIFunctionFactory.Create(SearchMemoryAsync)];

        // azureOpenAIEmbeddingConfig.Endpoint = "https://team-cnca.openai.azure.com/";
        // azureOpenAIEmbeddingConfig.APIKey = "9sRuOPjJkuPOQ6JjmXi7HAymODjcZnlHxfuhHz9vgij6DcpFfE9hJQQJ99BDACmepeSXJ3w3AAABACOGJi2N";
        // azureOpenAIEmbeddingConfig.Deployment = "gpt-4o-mini";

        var embeddingGenerator = ServiceProvider.GetService<IEmbeddingGenerator>();

        if (embeddingGenerator == null)
        {
            throw new InvalidOperationException("IEmbeddingGenerator was not registered properly.");
        }

        // Initialize the embedding generator for the DataUploader and enforce into Semantic Kernel

        var dataUploader = SemanticKernel.Services.GetRequiredService<DataUploader>();

        var dataPath = Path.Combine("wwwroot", "Data");

        // Infer the base Medical Device Architectural Specification Template.docx to use as general knowledge into Semantic Kernel for all multiagents
        using (var filestream = new FileStream(dataPath + "\\Medical Device Architectural Specification.docx", FileMode.Open))  
        {  
            var textParagraphs = DocumentReader.ReadParagraphs(  
                filestream,  
                 dataPath + "\\Medical Device Architectural Specification.docx");

            dataUploader.GenerateEmbeddingsAndUpload("software-documentation", textParagraphs);  
        }

        _environment = ServiceProvider.GetRequiredService<IHostingEnvironment>();

        // Process all uploaded files dynamically and infer all uploaded documents for processeing into Semantic Kernel for all multiagents
        var uploadDirectory = Path.Combine(_environment.WebRootPath, "Uploads");
        var uploadedFiles = Directory.GetFiles(uploadDirectory);

        foreach (var uploadedFile in uploadedFiles)
        {
            using (var filestream = new FileStream(uploadedFile, FileMode.Open))
            {
                var textParagraphs = DocumentReader.ReadParagraphs(filestream, uploadedFile);
                dataUploader.GenerateEmbeddingsAndUpload("uploaded-documents", textParagraphs);
            }
        }

    }

    private async Task AddUserMessageAsync(ChatMessage userMessage)  
    {
        // Assign the user message to the _userMessage field for later use
        _userMessage = userMessage;
        CancelAnyCurrentResponse();  

        // Add the user message to the conversation  
        messages.Add(userMessage);  
        chatSuggestions?.Clear();  
        await chatInput!.FocusAsync();  

        // Stream and display a new response from the IChatClient  
        var responseText = new Microsoft.Extensions.AI.TextContent("");
        currentResponseMessage = new ChatMessage(ChatRole.Assistant, [responseText]);  
        currentResponseCancellation = new();  

        try
        {
            await foreach (var update in ChatClient.GetStreamingResponseAsync([.. messages], chatOptions, currentResponseCancellation.Token))
            {
                messages.AddMessages(update, filter: c => c is not Microsoft.Extensions.AI.TextContent);
                responseText.Text += update.Text;
                ChatMessageItem.NotifyChanged(currentResponseMessage);
            }
        }
        catch (OperationCanceledException)
        {
            // Handle cancellation gracefully
            Console.WriteLine("Streaming response was canceled.");
        }
        catch (Exception ex)
        {
            // Log or handle other exceptions
            Console.WriteLine($"An error occurred: {ex.Message}");
        }

        // Store the final response in the conversation, and begin getting suggestions
        messages.Add(currentResponseMessage!);
        currentResponseMessage = null;
        chatSuggestions?.Update(messages);
    }  

    private void CancelAnyCurrentResponse()  
    {  
        // If a response was cancelled while streaming, include it in the conversation so it's not lost  
        if (currentResponseMessage is not null)  
        {  
            messages.Add(currentResponseMessage);  
        }  

        currentResponseCancellation?.Cancel();  
        currentResponseMessage = null;  
    }  

    private async Task ResetConversationAsync()  
    {  
        CancelAnyCurrentResponse();  
        messages.Clear();  
        messages.Add(new(ChatRole.System, SystemPrompt));  
        chatSuggestions?.Clear();  
        await chatInput!.FocusAsync();  
    }  

    [Description("Searches and informs about information using a phrase or keyword or an existing file")]  
    private async Task<IEnumerable<string>> SearchAsync(  
        [Description("The phrase to search for.")] string searchPhrase,  
        [Description("If possible, specify the filename to search that file only. If not provided or empty, the search includes all files.")] string? filenameFilter = null)  
    {  
        await InvokeAsync(StateHasChanged);  
        var results = await Search.SearchAsync(searchPhrase, filenameFilter, maxResults: 10);  
        return results.Select(result =>  
            $"<result filename=\"{result.FileName}\" page_number=\"{result.PageNumber}\">{result.Text}</result>");  
    }  

    [Description("When user types in command @process, run the multiagent services to validate an input")]
    private async Task<IEnumerable<string>> SearchMultiAgentAsync(
       [Description("If possible, specify the filename to process that file only. If not provided or empty, the search includes all files.")] string? filenameFilter = null)  
    {  
        await InvokeAsync(StateHasChanged);  

        // Call the GetMultiAgentResponseAsync method  
        string aiMultiAgentResponses = await MultiAgentApiClient.GetMultiAgentResponseAsync(_userMessage.Contents.Last().ToString());  
        var message = new ChatMessage(ChatRole.Assistant, new Microsoft.Extensions.AI.TextContent(aiMultiAgentResponses).Text);  
        ChatMessageItem.NotifyChanged(message);  

        // Convert the string into a single-element IEnumerable  
        IEnumerable<string> result = new List<string> { aiMultiAgentResponses };  

        // Write the result into a PDF file  

        RunPdf(Path.Combine("wwwroot", "Fonts", "arial.ttf"), Path.Combine("wwwroot", "Images", "csv-logo.png"), string.Join(Environment.NewLine, result), filenameFilter);

        // Wrap the IEnumerable in a Task  
        return await Task.FromResult(result);  
    }

    [Description("When user types in command @memory, run the memory vector search services to validate an input")]
    private async Task<IEnumerable<string>> SearchMemoryAsync(
        [Description("The question query to search for.")] string question,  
        [Description("If possible, specify the query to process the memory vector search. If not provided or empty, the query is just do a general query.")] string? filenameFilter = null)  
    {  
        await InvokeAsync(StateHasChanged);  

        // Call the Search Memory Vector method  

        MemoryVectorSearch memoryVectorSearch = new MemoryVectorSearch();  
        var kernel = Kernel.CreateBuilder().Build();  

        await memoryVectorSearch.IngestDataIntoInMemoryVectorStoreAsync(kernel, ServiceProvider);  

        var result = await memoryVectorSearch.SearchAnInMemoryVectorStoreAsync(ServiceProvider, question);  

        // Wrap the result in an IEnumerable<string>  
        return new List<string> { result };  
        // return results.Select(result =>  
        //     $"<result filename=\"{result.FileName}\" page_number=\"{result.PageNumber}\">{result.Text}</result>");  
    }

    public static void RunPdf(string trueTypeFontPath, string jpgImagePath, string content, string fileName)
    {
        var builder = new UglyToad.PdfPig.Writer.PdfDocumentBuilder
            {
                ArchiveStandard = UglyToad.PdfPig.Writer.PdfAStandard.A2A
            };

        var font = builder.AddTrueTypeFont(File.ReadAllBytes(trueTypeFontPath));

        var page = builder.AddPage(UglyToad.PdfPig.Content.PageSize.A4);
        var pageTop = new UglyToad.PdfPig.Core.PdfPoint(0, page.PageSize.Top);

        try
        {
            var contentHeader = page.AddText("Validation Planning Report - " + fileName,
                10,
                pageTop.Translate(20, -25),
                font);

            var contentLines = content.Split('\n');
            int yPosition = -30;  
            foreach (var line in contentLines)  
            {  
                if (yPosition <= -800)  
                {  
                    page = builder.AddPage(UglyToad.PdfPig.Content.PageSize.A4);  
                    pageTop = new UglyToad.PdfPig.Core.PdfPoint(0, page.PageSize.Top);  
                    yPosition = -30;  
                }  

                page.AddText(line,  
                    6,  
                    pageTop.Translate(20, yPosition -= 5),  
                    font);  
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to add text to PDF due to error: {ex}.");
        }

        //var bottomOfText = letters.Min(x => x.GlyphRectangle.Bottom);
        // var imagePlacement = new UglyToad.PdfPig.Core.PdfRectangle(new UglyToad.PdfPig.Core.PdfPoint(50, bottomOfText - 200),
        //     new UglyToad.PdfPig.Core.PdfPoint(150, bottomOfText));
        // page.AddJpeg(File.ReadAllBytes(jpgImagePath), imagePlacement);

        var fileBytes = builder.Build();

        try
        {
            var output = Path.Combine("wwwroot", "Reports", "Report-" + fileName + ".pdf");
            File.WriteAllBytes(output, fileBytes);
            Console.WriteLine($"File output to: {output}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to write output to file due to error: {ex}.");
        }
    }

    public void Dispose()  
        => currentResponseCancellation?.Cancel();



}
